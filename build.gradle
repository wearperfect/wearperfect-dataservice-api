plugins {
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id "java"
	id "org.sonarqube" version "3.4.0.2513"
	id 'application'
}

group = "com.wearperfect.dataservice.api"
version = "0.0.1-SNAPSHOT"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set("snippetsDir", file("build/generated-snippets"))
	set("mapstructVersion", "1.5.3.Final")
	set("jpamodelgenVersion", "6.1.7.Final")
	set('springCloudVersion', "2021.0.3")
	set('springdocVersion', "1.6.15")
	set('lombokVersion', "1.18.26")
	set('jjwtVersion', "0.9.1")
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-data-rest"
	implementation "org.springframework.boot:spring-boot-starter-hateoas"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation "org.springframework.boot:spring-boot-starter-cache"
	implementation "org.springframework.boot:spring-boot-starter-data-redis"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.data:spring-data-envers"
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation "org.springframework.data:spring-data-rest-hal-explorer"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"
	implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-security:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-javadoc:${springdocVersion}"
	implementation 'mysql:mysql-connector-java:8.0.32'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	compileOnly "org.hibernate:hibernate-jpamodelgen:${jpamodelgenVersion}"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	runtimeOnly "mysql:mysql-connector-java"
	runtimeOnly 'com.fasterxml.jackson.module:jackson-modules-java8:2.15.2'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"	
    annotationProcessor("org.hibernate:hibernate-jpamodelgen:${jpamodelgenVersion}")
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"

	// JAX-B dependencies for JDK 9+
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

compileJava {
	options.compilerArgs = [
		"-Amapstruct.defaultComponentModel=spring"
	]
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', '$buildDir/generated/sources/annotationProcessor/java/', 'scripts']
        }
    }
}

task copyDeployDir(type: Copy) {
	from '.'
	include 'deploy/**'
	into "${buildDir}/"
}

task appBuild{
	//dependsOn copyDeployDir
	doLast {
		println "Wearperfect API Build Complete"
	}
}

build.dependsOn([appBuild])

distTar{
	from('.') {
		include('deploy/**')
	}
	from('build') {
		include('/libs/**')
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
bootDistTar{
	from('.') {
		include('deploy/**')
	}
}
distZip{
	from('.') {
		include('deploy/**')
	}
}
bootDistZip{
	from('.') {
		include('deploy/**')
	}
}

/*sourceSets.configureEach { sourceSet ->
  tasks.named(sourceSet.compileJavaTaskName).configure {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/${sourceSet.name}")
  }
}*/

